# Application Configuration
spring.application.name=memail-backend

# Server Configuration
server.port=8585
server.servlet.context-path=/api

# Database Configuration
# Use environment variables in production for security
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://localhost:5432/memail}
spring.datasource.username=${DATABASE_USERNAME:memail}
spring.datasource.password=${DATABASE_PASSWORD:memail}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# Flyway Configuration - Updated for PostgreSQL 17.5 compatibility
spring.flyway.enabled=true
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.baseline-version=0
spring.flyway.validate-on-migrate=false

# User-facing IMAP server configuration (for reading emails)
mail.imap.host=localhost
mail.imap.port=143
mail.imap.ssl.enable=false
mail.imap.starttls.enable=true

# IMAP Performance Optimization
mail.imap.connectiontimeout=5000
mail.imap.timeout=10000
mail.imap.writetimeout=5000
mail.imap.fetchsize=16384
mail.imap.partialfetch=false

# User-facing SMTP server configuration (for reference)
mail.smtp.host=localhost
mail.smtp.port=587
mail.smtp.ssl.enable=false
mail.smtp.starttls.enable=true

# Application's centralized SMTP configuration (Spring Mail)
# The application uses these credentials to send emails on behalf of users
#
# FOR GMAIL: Use Gmail SMTP to send to external addresses
# IMPORTANT: You must use an App Password, not your regular Gmail password
# Generate one at: https://myaccount.google.com/apppasswords
#
# To use Gmail SMTP (for sending to external addresses):
# 1. Uncomment the Gmail configuration below
# 2. Replace YOUR_GMAIL_ADDRESS with your actual Gmail address
# 3. Replace YOUR_APP_PASSWORD with a Gmail App Password
# 4. Comment out the localhost configuration
#
# Gmail SMTP Configuration (UNCOMMENT TO USE):
# spring.mail.host=smtp.gmail.com
# spring.mail.port=587
# spring.mail.username=YOUR_GMAIL_ADDRESS@gmail.com
# spring.mail.password=YOUR_APP_PASSWORD
# spring.mail.properties.mail.smtp.auth=true
# spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true
# spring.mail.properties.mail.smtp.ssl.trust=smtp.gmail.com
#
# Local James SMTP Configuration (CURRENT - only for local delivery):
# Use environment variables in production for security
spring.mail.host=${SMTP_HOST:localhost}
spring.mail.port=${SMTP_PORT:587}
spring.mail.username=${SMTP_USERNAME:admin@ashulabs.com}
spring.mail.password=${SMTP_PASSWORD:admin123}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=5000
spring.mail.properties.mail.smtp.timeout=3000
spring.mail.properties.mail.smtp.writetimeout=5000

# Apache James WebAdmin (for management)
james.webadmin.host=localhost
james.webadmin.port=8000

# JWT Configuration
# JWT secret key - MUST be set via environment variable in production
# For local development, a default is provided
# Generate a secure key: openssl rand -base64 64
jwt.secret=${JWT_SECRET:bWVtYWlsU3VwZXJTZWN1cmVKV1RTZWNyZXRLZXlGb3JQcm9kdWN0aW9uVXNlMjAyNFZlcnlTdHJvbmdLZXk=}
jwt.expiration=${JWT_EXPIRATION:900000}
# Refresh token expiration (30 days in milliseconds)
jwt.refresh-expiration=${JWT_REFRESH_EXPIRATION:2592000000}

# CORS Configuration
cors.allowed-origins=http://localhost:4545
cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
cors.allowed-headers=*
cors.allow-credentials=true

# Frontend URL (for password reset emails, etc.)
frontend.url=${FRONTEND_URL:http://localhost:4545}

# Logging Configuration
logging.level.com.memail=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.mail=DEBUG

# Redis Configuration
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.timeout=60000
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0
spring.data.redis.lettuce.pool.max-wait=-1ms

# Cache Configuration
# Uses Redis for distributed caching
# Set CACHE_TYPE=caffeine to use in-memory cache instead
spring.cache.type=${CACHE_TYPE:redis}
spring.cache.redis.time-to-live=300000
spring.cache.redis.cache-null-values=false
spring.cache.cache-names=emailHeaders,emailDetails,conversations,folderCounts,userPreferences,labels

# Session Management with Redis
# Set SESSION_STORE_TYPE=none to use in-memory sessions instead
spring.session.store-type=${SESSION_STORE_TYPE:redis}
spring.session.redis.namespace=memail:session
spring.session.timeout=30m

# Rate Limiting Configuration with Redis
# Distributed rate limiting across multiple instances
rate.limit.enabled=${RATE_LIMIT_ENABLED:true}
rate.limit.redis.enabled=${RATE_LIMIT_REDIS_ENABLED:true}
rate.limit.login.capacity=5
rate.limit.login.refill-tokens=5
rate.limit.login.refill-duration=1m
rate.limit.api.capacity=100
rate.limit.api.refill-tokens=100
rate.limit.api.refill-duration=1m

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=when-authorized
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
management.metrics.export.prometheus.enabled=true

# Custom Health Indicators
management.health.mail.enabled=true